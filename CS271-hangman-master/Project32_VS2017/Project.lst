Microsoft (R) Macro Assembler Version 14.16.27034.0	    03/08/20 22:22:14
hangman.asm						     Page 1 - 1


				;Author: Jeremy Udarbe & Hannah Armstrong
				;Date Due: 3/9/2020
				;Course/ProjectID: CS-271	Group Project
				;Description: hangman.asm - user plays hangman

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				.386
				.model flat,stdcall
hangman.asm(9) : warning A4011:multiple .MODEL directives found : .MODEL ignored
				.stack 4096
				ExitProcess proto,dwExitCode:dword

				;Hannah TODO: block commenting, intro, outro, and play again operation



 00000000			.data
					;ASCII art
					
 00000000 2B 2D 2D 2D 2D		lives5		BYTE	"+------+       ",10,"|      |       ",10,"|              ",10,"|              ",10,"|              ",10,"|              ",10,"+------------+",0
	   2D 2D 2B 20 20
	   20 20 20 20 20
	   0A 7C 20 20 20
	   20 20 20 7C 20
	   20 20 20 20 20
	   20 0A 7C 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 0A 7C 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 0A 7C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 0A
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   0A 2B 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2B
	   00

 0000006F 2B 2D 2D 2D 2D		lives4		BYTE	"+------+       ",10,"|      |       ",10,"|      O       ",10,"|              ",10,"|              ",10,"|              ",10,"+------------+",0
	   2D 2D 2B 20 20
	   20 20 20 20 20
	   0A 7C 20 20 20
	   20 20 20 7C 20
	   20 20 20 20 20
	   20 0A 7C 20 20
	   20 20 20 20 4F
	   20 20 20 20 20
	   20 20 0A 7C 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 0A 7C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 0A
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   0A 2B 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2B
	   00
					
 000000DE 2B 2D 2D 2D 2D		lives3		BYTE	"+------+       ",10,"|      |       ",10,"|      O       ",10,"|     /|       ",10,"|              ",10,"|              ",10,"+------------+",0
	   2D 2D 2B 20 20
	   20 20 20 20 20
	   0A 7C 20 20 20
	   20 20 20 7C 20
	   20 20 20 20 20
	   20 0A 7C 20 20
	   20 20 20 20 4F
	   20 20 20 20 20
	   20 20 0A 7C 20
	   20 20 20 20 2F
	   7C 20 20 20 20
	   20 20 20 0A 7C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 0A
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   0A 2B 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2B
	   00
						
 0000014D 2B 2D 2D 2D 2D		lives2		BYTE	"+------+       ",10,"|      |       ",10,"|      O       ",10,"|     /|\      ",10,"|              ",10,"|              ",10,"+------------+",0
	   2D 2D 2B 20 20
	   20 20 20 20 20
	   0A 7C 20 20 20
	   20 20 20 7C 20
	   20 20 20 20 20
	   20 0A 7C 20 20
	   20 20 20 20 4F
	   20 20 20 20 20
	   20 20 0A 7C 20
	   20 20 20 20 2F
	   7C 5C 20 20 20
	   20 20 20 0A 7C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 0A
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   0A 2B 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2B
	   00
							
 000001BC 2B 2D 2D 2D 2D		lives1		BYTE	"+------+       ",10,"|      |       ",10,"|      O       ",10,"|     /|\      ",10,"|     /        ",10,"|              ",10,"+------------+",0
	   2D 2D 2B 20 20
	   20 20 20 20 20
	   0A 7C 20 20 20
	   20 20 20 7C 20
	   20 20 20 20 20
	   20 0A 7C 20 20
	   20 20 20 20 4F
	   20 20 20 20 20
	   20 20 0A 7C 20
	   20 20 20 20 2F
	   7C 5C 20 20 20
	   20 20 20 0A 7C
	   20 20 20 20 20
	   2F 20 20 20 20
	   20 20 20 20 0A
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   0A 2B 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2B
	   00

 0000022B 2B 2D 2D 2D 2D		lives0		BYTE	"+------+       ",10,"|      |       ",10,"|      O       ",10,"|     /|\      ",10,"|     / \      ",10,"|              ",10,"+------------+",0
	   2D 2D 2B 20 20
	   20 20 20 20 20
	   0A 7C 20 20 20
	   20 20 20 7C 20
	   20 20 20 20 20
	   20 0A 7C 20 20
	   20 20 20 20 4F
	   20 20 20 20 20
	   20 20 0A 7C 20
	   20 20 20 20 2F
	   7C 5C 20 20 20
	   20 20 20 0A 7C
	   20 20 20 20 20
	   2F 20 5C 20 20
	   20 20 20 20 0A
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   0A 2B 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2B
	   00

 0000029A 0000022B R			lives		DWORD	OFFSET LIVES0, OFFSET LIVES1, OFFSET LIVES2, OFFSET LIVES3, OFFSET LIVES4, OFFSET LIVES5
	   000001BC R
	   0000014D R
	   000000DE R
	   0000006F R
	   00000000 R


					;intro
 000002B2 57 45 4C 43 4F		intro1		BYTE	"WELCOME TO HANGMAN!",0
	   4D 45 20 54 4F
	   20 48 41 4E 47
	   4D 41 4E 21 00
 000002C6 50 72 65 73 73		intro2		BYTE	"Press a letter to guess. Do not press enter, the screen will refresh automatically.",0
	   20 61 20 6C 65
	   74 74 65 72 20
	   74 6F 20 67 75
	   65 73 73 2E 20
	   44 6F 20 6E 6F
	   74 20 70 72 65
	   73 73 20 65 6E
	   74 65 72 2C 20
	   74 68 65 20 73
	   63 72 65 65 6E
	   20 77 69 6C 6C
	   20 72 65 66 72
	   65 73 68 20 61
	   75 74 6F 6D 61
	   74 69 63 61 6C
	   6C 79 2E 00

					;outro
 0000031A 54 48 41 4E 4B		outro1		BYTE	"THANKS FOR PLAYING!",0
	   53 20 46 4F 52
	   20 50 4C 41 59
	   49 4E 47 21 00

					;gamestate
 0000032E 59 6F 75 20 77		gewinnen	BYTE	"You win hangman!",0		;I ran out of words so I started using German
	   69 6E 20 68 61
	   6E 67 6D 61 6E
	   21 00
 0000033F 59 6F 75 20 6B		verloren	BYTE	"You killed him!",0
	   69 6C 6C 65 64
	   20 68 69 6D 21
	   00
 0000034F 4C 49 56 45 53		livesleft	BYTE	"LIVES REMAINING: ",0
	   20 52 45 4D 41
	   49 4E 49 4E 47
	   3A 20 00
 00000361 4C 65 74 74 65		letused		BYTE	"Letters used: ",0
	   72 73 20 75 73
	   65 64 3A 20 00
 00000370 59 6F 75 20 61		error		BYTE	"You already guessed that letter. Enter again.",0
	   6C 72 65 61 64
	   79 20 67 75 65
	   73 73 65 64 20
	   74 68 61 74 20
	   6C 65 74 74 65
	   72 2E 20 45 6E
	   74 65 72 20 61
	   67 61 69 6E 2E
	   00

					;constants
 0000039E 73 74 61 63 6B		word1		BYTE	"stack",0		;4
	   00
 000003A4 73 74 72 69 6E		word2		BYTE	"string",0		;3
	   67 00
 000003AB 69 6E 74 65 67		word3		BYTE	"integer",0		;2
	   65 72 00
 000003B3 66 6C 6F 61 74		word4		BYTE	"float",0		;1
	   00
 000003B9 62 6F 6F 6C 65		word5		BYTE	"boolean",0		;0
	   61 6E 00
 000003C1 0000002D			space		DWORD	'-'


					;dynamics
 000003C5 00000000			winstate	DWORD	?
 000003C9 00000000			matches		DWORD	?
 000003CD 00000000			numlives	DWORD	?
 000003D1 00000000			gameword	DWORD	?
 000003D5 00000000			wordlength	DWORD	?
 000003D9 00000000			numround	DWORD	?
 000003DD  00000064 [			usedchars	BYTE	100	DUP(0)
	    00
	   ]
 00000441  00000005 [			wordlist	BYTE	5	DUP(0)
	    00
	   ]
 00000446  0000000A [			spacelist	BYTE	10	DUP(0)
	    00
	   ]


 00000000			.code
 00000000			main PROC
					;Seed random number generator
 00000000  E8 00000000 E		call	Randomize
 00000005				playagain:
					;------------------------------move words into an array of words
 00000005  68 00000441 R		push	OFFSET		wordlist	;28
 0000000A  68 0000039E R		push	OFFSET		word1		;24
 0000000F  68 000003A4 R		push	OFFSET		word2		;20
 00000014  68 000003AB R		push	OFFSET		word3		;16
 00000019  68 000003B3 R		push	OFFSET		word4		;12
 0000001E  68 000003B9 R		push	OFFSET		word5		;8
 00000023  E8 00000073			call	fillwords

					;------------------------------generate random integer which selects index of array, moves the chosen word into variable gameword
 00000028  68 00000441 R		push	OFFSET		wordlist	;12
 0000002D  68 000003D1 R		push	OFFSET		gameword	;8
 00000032  E8 00000096			call	getword

					;------------------------------gets length of word
 00000037  68 000003D5 R		push	OFFSET		wordlength	;12
 0000003C  FF 35 000003D1 R		push	gameword				;8
 00000042  E8 000000B4			call	getlength

					;------------------------------fill array with spaces according to length of word chosen
 00000047  68 00000446 R		push	OFFSET		spacelist	;12
 0000004C  FF 35 000003D5 R		push	wordlength				;8
 00000052  E8 000000C9			call	fillspaces
					
					;------------------------------gameplay: for loop with limit 5, compare input char with word array
 00000057  68 00000361 R		push	OFFSET		letused		;20
 0000005C  68 0000034F R		push	OFFSET		livesleft	;16
 00000061  68 0000032E R		push	OFFSET		gewinnen	;12
 00000066  68 0000033F R		push	OFFSET		verloren	;8
 0000006B  E8 0000000C			call	introduction
 00000070  E8 000000C5			call	gameplay

				invoke ExitProcess,0			;exit to operating system
 00000075  6A 00	   *	    push   +000000000h
 00000077  E8 00000000 E   *	    call   ExitProcess
 0000007C			main ENDP

				;**********************************
				;Description: Introduces the hangman program.
				;Receives: none
				;Returns: none
				;Preconditions: none
				;Registers changed: EDX
				;**********************************
 0000007C			introduction PROC
 0000007C  BA 000002B2 R	mov		edx, OFFSET intro1
 00000081  E8 00000000 E	call	writestring
 00000086  E8 00000000 E	call	crlf

 0000008B  BA 000002C6 R	mov		edx, OFFSET intro2
 00000090  E8 00000000 E	call	writestring
 00000095  E8 00000000 E	call	crlf

 0000009A  C3			ret
 0000009B			introduction ENDP

				;**********************************
				;Description: Fills the array of possible guess words
				;Receives: none
				;Returns: position on the stack
				;Preconditions: words and wordlist pushed to stack
				;Registers changed: edp, esp, edi, edx
				;**********************************
 0000009B			fillwords	PROC
 0000009B  55			push	ebp
 0000009C  8B EC		mov		ebp, esp

 0000009E  8B 7D 1C		mov		edi, [ebp+28]

 000000A1  8B 55 08		mov		edx, [ebp+8]
 000000A4  89 17		mov		[edi], edx
 000000A6  83 C7 04		add		edi, 4

 000000A9  8B 55 0C		mov		edx, [ebp+12]
 000000AC  89 17		mov		[edi], edx
 000000AE  83 C7 04		add		edi, 4

 000000B1  8B 55 10		mov		edx, [ebp+16]
 000000B4  89 17		mov		[edi], edx
 000000B6  83 C7 04		add		edi, 4

 000000B9  8B 55 14		mov		edx, [ebp+20]
 000000BC  89 17		mov		[edi], edx
 000000BE  83 C7 04		add		edi, 4

 000000C1  8B 55 18		mov		edx, [ebp+24]
 000000C4  89 17		mov		[edi], edx
 000000C6  83 C7 04		add		edi, 4

 000000C9  5D			pop		ebp
 000000CA  C2 0018		ret		24
 000000CD			fillwords	ENDP

				;**********************************
				;Description: Randomly chooses a word to be guessed and moves it to edx.
				;Receives: none
				;Returns: position on the stack
				;Preconditions: word and wordlist pushed to stack
				;Registers changed: edp, esp, edi, edx
				;**********************************
 000000CD			getword		PROC
 000000CD  55			push	ebp
 000000CE  8B EC		mov		ebp, esp

 000000D0  8B 7D 0C		mov		edi, [ebp+12]	;array of words
 000000D3  B8 00000005		mov		eax, 5
 000000D8  E8 00000000 E	call	RandomRange
 000000DD  BB 00000004		mov		ebx, 4
 000000E2  F7 E3		mul		ebx
 000000E4  03 F8		add		edi, eax
 000000E6  8B 17		mov		edx, [edi]
 000000E8  8B 75 08		mov		esi, [ebp+8]	;chosen word
 000000EB  89 16		mov		[esi], edx		;move the string into ebx

 000000ED  E8 00000000 E	call	WriteString		;----------------------------------------------------DEBUG: Prints guessword.
 000000F2  E8 00000000 E	call	crlf

 000000F7  5D			pop		ebp
 000000F8  C2 0008		ret		8
 000000FB			getword		ENDP

				;**********************************
				;Description: Counts the # of letters in a string.
				;Receives: none
				;Returns: position on the stack
				;Preconditions: wordlength variable and guessword pushed to stack
				;Registers changed: edp, esp, edi, ebp, eax, ebx
				;**********************************
 000000FB			getlength	PROC
 000000FB  55			push	ebp
 000000FC  8B EC		mov		ebp, esp

 000000FE  8B 7D 08		mov		edi, [ebp+8]
 00000101  8B D7		mov		edx, edi

 00000103  B8 00000000		mov		eax, 0
 00000108			loopstring:				;loop through string incrementing eax and next char until null char
 00000108  8A 17		mov		dl, [edi]
 0000010A  80 FA 00		cmp		dl, 0
 0000010D  74 08		je		endstring
 0000010F  83 C7 01		add		edi, 1
 00000112  83 C0 01		add		eax, 1
 00000115  EB F1		jmp	loopstring

 00000117			endstring:
 00000117  8B 5D 0C		mov		ebx, [ebp+12]
 0000011A  89 03		mov		[ebx], eax
 0000011C  5D			pop		ebp
 0000011D  C2 0008		ret		8
 00000120			getlength ENDP

				;**********************************
				;Description: Fills the array of the word to be guessed, shown as dashes.
				;Receives: none
				;Returns: position on the stack
				;Preconditions: array to hold the guessword and length pushed to stack
				;Registers changed: edp, esp, edi, edx
				;**********************************
 00000120			fillspaces	PROC
 00000120  55			push	ebp
 00000121  8B EC		mov		ebp, esp

 00000123  8B 7D 0C		mov		edi, [ebp+12]		;array of spaces
 00000126  B2 2D		mov		dl, 45		;space
 00000128  8B 4D 08		mov		ecx, [ebp+8]		;wordlengh

 0000012B			fillarray2:
 0000012B  88 17		mov		[edi], dl
 0000012D  83 C7 01		add		edi, 1
 00000130  E2 F9		loop	fillarray2

 00000132  B2 00		mov		dl, 0
 00000134  88 17		mov		[edi], dl

 00000136  5D			pop		ebp
 00000137  C2 000C		ret		12
 0000013A			fillspaces	ENDP

				;**********************************
				;Description: User takes one turn. Includes:
				;					Initializing lives and round #, printing
				;					Print hangman and word progress
				;					Check how much progress has been made to determine win/lose state
				;					Print previously used letters
				;					Gets user input of one letter
				;					Prints endgame and win conditions
				;Receives: none
				;Returns: position on the stack
				;Preconditions: letters used, lives left, win/lose status messages pushed to stack
				;Registers changed: edp, esp, edx, eax, ebp
				;**********************************
 0000013A			gameplay	PROC
 0000013A  55			push	ebp
 0000013B  8B EC		mov		ebp, esp

				;------------------------------initialize lives and round number
 0000013D  C7 05 000003CD R	mov		numlives, 5
	   00000005
 00000147  C7 05 000003D9 R	mov		numround, 1
	   00000001
 00000151  C7 05 000003C5 R	mov		winstate, 0
	   00000000

 0000015B			gameloop:
				;------------------------------print lives left
 0000015B  8B 55 10		mov		edx, [ebp+16]
 0000015E  E8 00000000 E	call	writestring
 00000163  A1 000003CD R	mov		eax, numlives
 00000168  E8 00000000 E	call	writedec
 0000016D  E8 00000000 E	call	crlf
				;------------------------------print hangman corresponding to lives left
 00000172  FF 35 000003CD R	push	numlives			;8
 00000178  E8 000000AF		call	printman
				;------------------------------print word progress
 0000017D  68 00000446 R	push	OFFSET	spacelist	;12
 00000182  FF 35 000003D5 R	push	wordlength			;8
 00000188  E8 000000C8		call	printprog
				;------------------------------gamestate
 0000018D  83 3D 000003CD R	cmp		numlives, 0
	   00
 00000194  74 74		je		lose
				;------------------------------gamestate check if progress string has no dashes
 00000196  68 00000446 R	push	OFFSET	spacelist	;16
 0000019B  FF 35 000003D5 R	push	wordlength			;12
 000001A1  FF 35 000003C5 R	push	winstate			;8
 000001A7  E8 0000016D		call	checkwin
 000001AC  83 3D 000003C5 R	cmp		winstate, 1
	   01
 000001B3  74 64		je		win
				;------------------------------print used letters
 000001B5  8B 55 14		mov		edx, [ebp+20]
 000001B8  E8 00000000 E	call	writestring
 000001BD  68 000003DD R	push	OFFSET	usedchars	;12
 000001C2  FF 35 000003D9 R	push	numround			;8
 000001C8  E8 000000B2		call	printused
 000001CD  E8 00000000 E	call	crlf
				;------------------------------get user character input //does not check if letter has been used before
 000001D2  FF 35 000003CD R	push	numlives			;28
 000001D8  FF 35 000003D9 R	push	numround			;24
 000001DE  FF 35 000003D1 R	push	gameword			;20
 000001E4  FF 35 000003D5 R	push	wordlength			;16
 000001EA  68 000003DD R	push	OFFSET	usedchars	;12
 000001EF  68 00000446 R	push	OFFSET	spacelist	;8
 000001F4  E8 000000A6		call	userinput
				;------------------------------loop new round
 000001F9  83 05 000003D9 R	add		numround, 1
	   01
 00000200  E8 00000000 E	call	clrscr
 00000205  E9 FFFFFF51		jmp		gameloop

 0000020A			lose:
 0000020A  8B 55 08			mov		edx, [ebp+8]
 0000020D  E8 00000000 E		call	writestring
 00000212  E8 00000000 E		call	crlf
 00000217  EB 0F			jmp		endgame
 00000219			win:
 00000219  8B 55 0C			mov		edx, [ebp+12]
 0000021C  E8 00000000 E		call	writestring
 00000221  E8 00000000 E		call	crlf
 00000226  EB 00			jmp		endgame
 00000228			endgame:
 00000228  5D			pop		ebp
 00000229  C2 0010		ret		16
 0000022C			gameplay	ENDP

				;**********************************
				;Description: Prints Hangman ASCII art based on lives used.
				;Receives: none
				;Returns: position on the stack
				;Preconditions: number of lives used pushed to stack
				;Registers changed: edp, esp, eax, ebx, ecx, ebp
				;**********************************
 0000022C			printman	PROC
 0000022C  55			push	ebp
 0000022D  8B EC		mov		ebp, esp

 0000022F  8B 45 08		mov		eax, [ebp+8]
 00000232  BB 0000029A R	mov		ebx, OFFSET lives
 00000237  B9 00000004		mov		ecx, 4
 0000023C  F7 E1		mul		ecx
 0000023E  03 C3		add		eax, ebx
 00000240  8B 10		mov		edx, [eax]
 00000242  E8 00000000 E	call	WriteString
 00000247  E8 00000000 E	call	crlf
 0000024C  E8 00000000 E	call	crlf

 00000251  5D			pop		ebp
 00000252  C2 0004		ret		4
 00000255			printman	ENDP

				;**********************************
				;Description: Prints guessing word progress.
				;Receives: none
				;Returns: position on the stack
				;Preconditions: Guessing (dashed) word and word length pushed to stack
				;Registers changed: edp, ebp, esp, edi, ecx
				;**********************************
 00000255			printprog	PROC
 00000255  55			push	ebp
 00000256  8B EC		mov		ebp, esp

 00000258  8B 7D 0C		mov		edi, [ebp+12]	;string (array of chars)
 0000025B  8B 4D 08		mov		ecx, [ebp+8]	;word length
 0000025E			progress:
 0000025E  8A 07		mov		al, [edi]
 00000260  E8 00000000 E	call	WriteChar
 00000265  B0 20		mov		al, 32
 00000267  E8 00000000 E	call	WriteChar
 0000026C  83 C7 01		add		edi, 1
 0000026F  E2 ED		loop progress
 00000271  E8 00000000 E	call	crlf
 00000276  E8 00000000 E	call	crlf

 0000027B  5D			pop		ebp
 0000027C  C2 0008		ret		8
 0000027F			printprog	ENDP

				;**********************************
				;Description: Prints letters previously guessed.
				;Receives: none
				;Returns: position on the stack
				;Preconditions: Used letters array and reoudn number pushed to stack
				;Registers changed: ebp, esp, edi, ecx
				;**********************************
 0000027F			printused	PROC
 0000027F  55			push	ebp
 00000280  8B EC		mov		ebp, esp
 00000282  8B 7D 0C		mov		edi, [ebp+12]	;usedletters
 00000285  8B 4D 08		mov		ecx, [ebp+8]	;roundnum
 00000288			usedloop:
 00000288  8A 07		mov		al, [edi]
 0000028A  E8 00000000 E	call	writechar
 0000028F  B0 20		mov		al, 32
 00000291  E8 00000000 E	call	writechar
 00000296  83 C7 01		add		edi, 1
 00000299  E2 ED		loop usedloop

 0000029B  5D			pop		ebp
 0000029C  C2 0008		ret		8
 0000029F			printused	ENDP

				;**********************************
				;Description: Recieves and processes user input.
				;Receives: none
				;Returns: position on the stack
				;Preconditions: Array of used characters, guessword, word length, round number, pushed to stack
				;Registers changed: edp, esp, eax, ebx, ecx, ebp, esi, al, bl
				;**********************************
 0000029F			userinput	PROC
 0000029F  55			push	ebp
 000002A0  8B EC		mov		ebp, esp
 000002A2  8B 75 0C		mov		esi, [ebp+12]	;array used chars
 000002A5  8B 7D 14		mov		edi, [ebp+20]	;gameword
 000002A8  8B 4D 10		mov		ecx, [ebp+16]	;wordlength

 000002AB			getinput:
 000002AB  E8 00000000 E	call	readchar		;user input stored in al
 000002B0  8A D8		mov		bl, al
 000002B2			compareguessed:
 000002B2  8A 16			mov		dl, [esi]
 000002B4  3A DA			cmp		bl, dl
 000002B6  74 07			je		errorhandle
 000002B8  83 C6 01			add		esi, 1
 000002BB  E2 F5			loop	compareguessed
 000002BD  EB 11			jmp		continput
 000002BF			errorhandle:
 000002BF  BA 00000370 R		mov		edx, OFFSET error
 000002C4  E8 00000000 E		call	writestring
 000002C9  E8 00000000 E		call	crlf
 000002CE  EB DB			jmp		getinput
 000002D0			continput:
 000002D0  8B 45 18		mov		eax, [ebp+24]	;round number
 000002D3  8B 4D 10		mov		ecx, [ebp+16]	;reinitialize loop times with gamelength
 000002D6  2B F1		sub		esi, ecx
 000002D8  03 F0		add		esi, eax
 000002DA  88 1E		mov		[esi], bl	;move the input char into an array of used input chars
 000002DC  8B 75 08		mov		esi, [ebp+8]	;progress string/array of chars
 000002DF  03 F1		add		esi, ecx
 000002E1  C7 05 000003C9 R	mov		matches, 0
	   00000000
 000002EB			compareinput:
 000002EB  8A 07			mov		al, [edi]
 000002ED  3A D8			cmp		bl, al
 000002EF  74 02			je		charmatch
 000002F1  EB 0D			jmp		endcomp
 000002F3				charmatch:
 000002F3  83 05 000003C9 R			add		matches, 1
	   01
 000002FA  2B F1				sub		esi, ecx
 000002FC  88 1E				mov		[esi], bl		;replaces the matched char into progress string
 000002FE  03 F1				add		esi, ecx		
 00000300				endcomp:
 00000300  83 C7 01			add		edi, 1
 00000303  E2 E6			loop	compareinput
 00000305  83 3D 000003C9 R	cmp		matches, 0			;if no matches found, reduce life
	   00
 0000030C  75 07		jne		playerclear
 0000030E  83 2D 000003CD R	sub		numlives, 1
	   01
 00000315			playerclear:
 00000315  5D			pop		ebp
 00000316  C2 0018		ret		24
 00000319			userinput	ENDP

 00000319			checkwin	PROC
 00000319  55			push	ebp
 0000031A  8B EC		mov		ebp, esp
 0000031C  8B 7D 10		mov		edi, [ebp+16]	;progress string
 0000031F  8B 4D 0C		mov		ecx, [ebp+12]	;word length
 00000322			checkdash:
 00000322  8A 07		mov		al, [edi]
 00000324  B3 2D		mov		bl, 45
 00000326  3A C3		cmp		al, bl
 00000328  74 0F		je		continue
 0000032A  83 C7 01		add		edi, 1
 0000032D  E2 F3		loop	checkdash
 0000032F  C7 05 000003C5 R	mov		winstate, 1
	   00000001
 00000339			continue:
 00000339  5D			pop		ebp
 0000033A  C2 000C		ret		12
 0000033D			checkwin	ENDP

				END main


Microsoft (R) Macro Assembler Version 14.16.27034.0	    03/08/20 22:22:14
hangman.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000450 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000033D Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
checkwin . . . . . . . . . . . .	P Near	 00000319 _TEXT	Length= 00000024 Public STDCALL
  checkdash  . . . . . . . . . .	L Near	 00000322 _TEXT	
  continue . . . . . . . . . . .	L Near	 00000339 _TEXT	
fillspaces . . . . . . . . . . .	P Near	 00000120 _TEXT	Length= 0000001A Public STDCALL
  fillarray2 . . . . . . . . . .	L Near	 0000012B _TEXT	
fillwords  . . . . . . . . . . .	P Near	 0000009B _TEXT	Length= 00000032 Public STDCALL
gameplay . . . . . . . . . . . .	P Near	 0000013A _TEXT	Length= 000000F2 Public STDCALL
  gameloop . . . . . . . . . . .	L Near	 0000015B _TEXT	
  lose . . . . . . . . . . . . .	L Near	 0000020A _TEXT	
  win  . . . . . . . . . . . . .	L Near	 00000219 _TEXT	
  endgame  . . . . . . . . . . .	L Near	 00000228 _TEXT	
getlength  . . . . . . . . . . .	P Near	 000000FB _TEXT	Length= 00000025 Public STDCALL
  loopstring . . . . . . . . . .	L Near	 00000108 _TEXT	
  endstring  . . . . . . . . . .	L Near	 00000117 _TEXT	
getword  . . . . . . . . . . . .	P Near	 000000CD _TEXT	Length= 0000002E Public STDCALL
introduction . . . . . . . . . .	P Near	 0000007C _TEXT	Length= 0000001F Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000007C Public STDCALL
  playagain  . . . . . . . . . .	L Near	 00000005 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
printman . . . . . . . . . . . .	P Near	 0000022C _TEXT	Length= 00000029 Public STDCALL
printprog  . . . . . . . . . . .	P Near	 00000255 _TEXT	Length= 0000002A Public STDCALL
  progress . . . . . . . . . . .	L Near	 0000025E _TEXT	
printused  . . . . . . . . . . .	P Near	 0000027F _TEXT	Length= 00000020 Public STDCALL
  usedloop . . . . . . . . . . .	L Near	 00000288 _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
userinput  . . . . . . . . . . .	P Near	 0000029F _TEXT	Length= 0000007A Public STDCALL
  getinput . . . . . . . . . . .	L Near	 000002AB _TEXT	
  compareguessed . . . . . . . .	L Near	 000002B2 _TEXT	
  errorhandle  . . . . . . . . .	L Near	 000002BF _TEXT	
  continput  . . . . . . . . . .	L Near	 000002D0 _TEXT	
  compareinput . . . . . . . . .	L Near	 000002EB _TEXT	
  charmatch  . . . . . . . . . .	L Near	 000002F3 _TEXT	
  endcomp  . . . . . . . . . . .	L Near	 00000300 _TEXT	
  playerclear  . . . . . . . . .	L Near	 00000315 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
error  . . . . . . . . . . . . .	Byte	 00000370 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gameword . . . . . . . . . . . .	DWord	 000003D1 _DATA	
gewinnen . . . . . . . . . . . .	Byte	 0000032E _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro1 . . . . . . . . . . . . .	Byte	 000002B2 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 000002C6 _DATA	
letused  . . . . . . . . . . . .	Byte	 00000361 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
lives0 . . . . . . . . . . . . .	Byte	 0000022B _DATA	
lives1 . . . . . . . . . . . . .	Byte	 000001BC _DATA	
lives2 . . . . . . . . . . . . .	Byte	 0000014D _DATA	
lives3 . . . . . . . . . . . . .	Byte	 000000DE _DATA	
lives4 . . . . . . . . . . . . .	Byte	 0000006F _DATA	
lives5 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
livesleft  . . . . . . . . . . .	Byte	 0000034F _DATA	
lives  . . . . . . . . . . . . .	DWord	 0000029A _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
matches  . . . . . . . . . . . .	DWord	 000003C9 _DATA	
numlives . . . . . . . . . . . .	DWord	 000003CD _DATA	
numround . . . . . . . . . . . .	DWord	 000003D9 _DATA	
outro1 . . . . . . . . . . . . .	Byte	 0000031A _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
spacelist  . . . . . . . . . . .	Byte	 00000446 _DATA	
space  . . . . . . . . . . . . .	DWord	 000003C1 _DATA	
usedchars  . . . . . . . . . . .	Byte	 000003DD _DATA	
verloren . . . . . . . . . . . .	Byte	 0000033F _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
winstate . . . . . . . . . . . .	DWord	 000003C5 _DATA	
word1  . . . . . . . . . . . . .	Byte	 0000039E _DATA	
word2  . . . . . . . . . . . . .	Byte	 000003A4 _DATA	
word3  . . . . . . . . . . . . .	Byte	 000003AB _DATA	
word4  . . . . . . . . . . . . .	Byte	 000003B3 _DATA	
word5  . . . . . . . . . . . . .	Byte	 000003B9 _DATA	
wordlength . . . . . . . . . . .	DWord	 000003D5 _DATA	
wordlist . . . . . . . . . . . .	Byte	 00000441 _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
