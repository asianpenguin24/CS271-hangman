Microsoft (R) Macro Assembler Version 14.16.27034.0	    03/08/20 14:30:56
hangman.asm						     Page 1 - 1


				;Author: Jeremy Udarbe & Hannah Armstrong
				;Date Due: 3/9/2020
				;Course/ProjectID: CS-271	Group Project
				;Description: hangman.asm - user plays hangman

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				.386
				.model flat,stdcall
hangman.asm(9) : warning A4011:multiple .MODEL directives found : .MODEL ignored
				.stack 4096
				ExitProcess proto,dwExitCode:dword

				;Hannah TODO: block commenting, intro, outro, and play again operation



 00000000			.data
					;ASCII art
					
 00000000 2B 2D 2D 2D 2D		lives5		BYTE	"+------+       ",10,"|      |       ",10,"|              ",10,"|              ",10,"|              ",10,"|              ",10,"+------------+",0
	   2D 2D 2B 20 20
	   20 20 20 20 20
	   0A 7C 20 20 20
	   20 20 20 7C 20
	   20 20 20 20 20
	   20 0A 7C 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 0A 7C 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 0A 7C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 0A
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   0A 2B 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2B
	   00

 0000006F 2B 2D 2D 2D 2D		lives4		BYTE	"+------+       ",10,"|      |       ",10,"|      O       ",10,"|              ",10,"|              ",10,"|              ",10,"+------------+",0
	   2D 2D 2B 20 20
	   20 20 20 20 20
	   0A 7C 20 20 20
	   20 20 20 7C 20
	   20 20 20 20 20
	   20 0A 7C 20 20
	   20 20 20 20 4F
	   20 20 20 20 20
	   20 20 0A 7C 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 0A 7C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 0A
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   0A 2B 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2B
	   00
					
 000000DE 2B 2D 2D 2D 2D		lives3		BYTE	"+------+       ",10,"|      |       ",10,"|      O       ",10,"|     /|       ",10,"|              ",10,"|              ",10,"+------------+",0
	   2D 2D 2B 20 20
	   20 20 20 20 20
	   0A 7C 20 20 20
	   20 20 20 7C 20
	   20 20 20 20 20
	   20 0A 7C 20 20
	   20 20 20 20 4F
	   20 20 20 20 20
	   20 20 0A 7C 20
	   20 20 20 20 2F
	   7C 20 20 20 20
	   20 20 20 0A 7C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 0A
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   0A 2B 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2B
	   00
						
 0000014D 2B 2D 2D 2D 2D		lives2		BYTE	"+------+       ",10,"|      |       ",10,"|      O       ",10,"|     /|\      ",10,"|              ",10,"|              ",10,"+------------+",0
	   2D 2D 2B 20 20
	   20 20 20 20 20
	   0A 7C 20 20 20
	   20 20 20 7C 20
	   20 20 20 20 20
	   20 0A 7C 20 20
	   20 20 20 20 4F
	   20 20 20 20 20
	   20 20 0A 7C 20
	   20 20 20 20 2F
	   7C 5C 20 20 20
	   20 20 20 0A 7C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 0A
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   0A 2B 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2B
	   00
							
 000001BC 2B 2D 2D 2D 2D		lives1		BYTE	"+------+       ",10,"|      |       ",10,"|      O       ",10,"|     /|\      ",10,"|     /        ",10,"|              ",10,"+------------+",0
	   2D 2D 2B 20 20
	   20 20 20 20 20
	   0A 7C 20 20 20
	   20 20 20 7C 20
	   20 20 20 20 20
	   20 0A 7C 20 20
	   20 20 20 20 4F
	   20 20 20 20 20
	   20 20 0A 7C 20
	   20 20 20 20 2F
	   7C 5C 20 20 20
	   20 20 20 0A 7C
	   20 20 20 20 20
	   2F 20 20 20 20
	   20 20 20 20 0A
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   0A 2B 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2B
	   00

 0000022B 2B 2D 2D 2D 2D		lives0		BYTE	"+------+       ",10,"|      |       ",10,"|      O       ",10,"|     /|\      ",10,"|     / \      ",10,"|              ",10,"+------------+",0
	   2D 2D 2B 20 20
	   20 20 20 20 20
	   0A 7C 20 20 20
	   20 20 20 7C 20
	   20 20 20 20 20
	   20 0A 7C 20 20
	   20 20 20 20 4F
	   20 20 20 20 20
	   20 20 0A 7C 20
	   20 20 20 20 2F
	   7C 5C 20 20 20
	   20 20 20 0A 7C
	   20 20 20 20 20
	   2F 20 5C 20 20
	   20 20 20 20 0A
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   0A 2B 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2B
	   00

 0000029A 0000022B R			lives		DWORD	OFFSET LIVES0, OFFSET LIVES1, OFFSET LIVES2, OFFSET LIVES3, OFFSET LIVES4, OFFSET LIVES5
	   000001BC R
	   0000014D R
	   000000DE R
	   0000006F R
	   00000000 R


					;intro
 000002B2 57 45 4C 43 4F		intro1		BYTE	"WELCOME TO HANGMAN!",0
	   4D 45 20 54 4F
	   20 48 41 4E 47
	   4D 41 4E 21 00

					;outro
 000002C6 54 48 41 4E 4B		outro1		BYTE	"THANKS FOR PLAYING!",0
	   53 20 46 4F 52
	   20 50 4C 41 59
	   49 4E 47 21 00

					;gamestate
 000002DA 59 6F 75 20 77		gewinnen	BYTE	"You win hangman!",0		;I ran out of words so I started using German
	   69 6E 20 68 61
	   6E 67 6D 61 6E
	   21 00
 000002EB 59 6F 75 20 6B		verloren	BYTE	"You killed him!",0
	   69 6C 6C 65 64
	   20 68 69 6D 21
	   00
 000002FB 4C 49 56 45 53		livesleft	BYTE	"LIVES REMAINING: ",0
	   20 52 45 4D 41
	   49 4E 49 4E 47
	   3A 20 00
 0000030D 4C 65 74 74 65		letused		BYTE	"Letters used: ",0
	   72 73 20 75 73
	   65 64 3A 20 00

					;constants
 0000031C 73 74 61 63 6B		word1		BYTE	"stack",0		;4
	   00
 00000322 73 74 72 69 6E		word2		BYTE	"string",0		;3
	   67 00
 00000329 69 6E 74 65 67		word3		BYTE	"integer",0		;2
	   65 72 00
 00000331 66 6C 6F 61 74		word4		BYTE	"float",0		;1
	   00
 00000337 62 6F 6F 6C 65		word5		BYTE	"boolean",0		;0
	   61 6E 00
 0000033F 0000002D			space		DWORD	'-'


					;dynamics
 00000343 00000000			winstate	DWORD	?
 00000347 00000000			matches		DWORD	?
 0000034B 00000000			numlives	DWORD	?
 0000034F 00000000			gameword	DWORD	?
 00000353 00000000			wordlength	DWORD	?
 00000357 00000000			numround	DWORD	?
 0000035B  00000064 [			usedchars	BYTE	100	DUP(0)
	    00
	   ]
 000003BF  00000005 [			wordlist	BYTE	5	DUP(0)
	    00
	   ]
 000003C4  0000000A [			spacelist	BYTE	10	DUP(0)
	    00
	   ]


 00000000			.code
 00000000			main PROC
					;Seed random number generator
 00000000  E8 00000000 E		call	Randomize
 00000005				playagain:
					;------------------------------move words into an array of words
 00000005  68 000003BF R		push	OFFSET		wordlist	;28
 0000000A  68 0000031C R		push	OFFSET		word1		;24
 0000000F  68 00000322 R		push	OFFSET		word2		;20
 00000014  68 00000329 R		push	OFFSET		word3		;16
 00000019  68 00000331 R		push	OFFSET		word4		;12
 0000001E  68 00000337 R		push	OFFSET		word5		;8
 00000023  E8 0000004F			call	fillwords

					;------------------------------generate random integer which selects index of array, moves the chosen word into variable gameword
 00000028  68 000003BF R		push	OFFSET		wordlist	;12
 0000002D  68 0000034F R		push	OFFSET		gameword	;8
 00000032  E8 00000072			call	getword

					;------------------------------gets length of word
 00000037  68 00000353 R		push	OFFSET		wordlength	;12
 0000003C  FF 35 0000034F R		push	gameword				;8
 00000042  E8 00000090			call	getlength

					;------------------------------fill array with spaces according to length of word chosen
 00000047  68 000003C4 R		push	OFFSET		spacelist	;12
 0000004C  FF 35 00000353 R		push	wordlength				;8
 00000052  E8 000000A5			call	fillspaces
					
					;------------------------------gameplay: for loop with limit 5, compare input char with word array
 00000057  68 0000030D R		push	OFFSET		letused		;20
 0000005C  68 000002FB R		push	OFFSET		livesleft	;16
 00000061  68 000002DA R		push	OFFSET		gewinnen	;12
 00000066  68 000002EB R		push	OFFSET		verloren	;8
 0000006B  E8 000000A6			call	gameplay

				invoke ExitProcess,0			;exit to operating system
 00000070  6A 00	   *	    push   +000000000h
 00000072  E8 00000000 E   *	    call   ExitProcess
 00000077			main ENDP

				;**********************************
				;Description:
				;Receives:
				;Returns:
				;Preconditions:
				;Registers changed:
				;**********************************
				;introduction PROC
				;	;push address of ebp and mov contents of stack
				;	push	ebp
				;	mov		ebp, esp
				;	
				;	pop		ebp
				;	ret		;space used
				;introduction ENDP

				;generate array
 00000077			fillwords	PROC
 00000077  55			push	ebp
 00000078  8B EC		mov		ebp, esp

 0000007A  8B 7D 1C		mov		edi, [ebp+28]

 0000007D  8B 55 08		mov		edx, [ebp+8]
 00000080  89 17		mov		[edi], edx
 00000082  83 C7 04		add		edi, 4

 00000085  8B 55 0C		mov		edx, [ebp+12]
 00000088  89 17		mov		[edi], edx
 0000008A  83 C7 04		add		edi, 4

 0000008D  8B 55 10		mov		edx, [ebp+16]
 00000090  89 17		mov		[edi], edx
 00000092  83 C7 04		add		edi, 4

 00000095  8B 55 14		mov		edx, [ebp+20]
 00000098  89 17		mov		[edi], edx
 0000009A  83 C7 04		add		edi, 4

 0000009D  8B 55 18		mov		edx, [ebp+24]
 000000A0  89 17		mov		[edi], edx
 000000A2  83 C7 04		add		edi, 4

 000000A5  5D			pop		ebp
 000000A6  C2 0018		ret		24
 000000A9			fillwords	ENDP

				;get word used for game from word array
 000000A9			getword		PROC
 000000A9  55			push	ebp
 000000AA  8B EC		mov		ebp, esp

 000000AC  8B 7D 0C		mov		edi, [ebp+12]	;array of words
 000000AF  B8 00000005		mov		eax, 5
 000000B4  E8 00000000 E	call	RandomRange
 000000B9  BB 00000004		mov		ebx, 4
 000000BE  F7 E3		mul		ebx
 000000C0  03 F8		add		edi, eax
 000000C2  8B 17		mov		edx, [edi]
 000000C4  8B 75 08		mov		esi, [ebp+8]	;chosen word
 000000C7  89 16		mov		[esi], edx		;move the string into ebx

 000000C9  E8 00000000 E	call	WriteString		;----------------------------------------------------temp debug
 000000CE  E8 00000000 E	call	crlf

 000000D3  5D			pop		ebp
 000000D4  C2 0008		ret		8
 000000D7			getword		ENDP

				;count number of characters in a string
 000000D7			getlength	PROC
 000000D7  55			push	ebp
 000000D8  8B EC		mov		ebp, esp

 000000DA  8B 7D 08		mov		edi, [ebp+8]
 000000DD  8B D7		mov		edx, edi

 000000DF  B8 00000000		mov		eax, 0
 000000E4			loopstring:				;loop through string incrementing eax and next char until null char
 000000E4  8A 17		mov		dl, [edi]
 000000E6  80 FA 00		cmp		dl, 0
 000000E9  74 08		je		endstring
 000000EB  83 C7 01		add		edi, 1
 000000EE  83 C0 01		add		eax, 1
 000000F1  EB F1		jmp	loopstring

 000000F3			endstring:
 000000F3  8B 5D 0C		mov		ebx, [ebp+12]
 000000F6  89 03		mov		[ebx], eax
 000000F8  5D			pop		ebp
 000000F9  C2 0008		ret		8
 000000FC			getlength ENDP

				;move spaces into array for user to guess
 000000FC			fillspaces	PROC
 000000FC  55			push	ebp
 000000FD  8B EC		mov		ebp, esp

 000000FF  8B 7D 0C		mov		edi, [ebp+12]		;array of spaces
 00000102  B2 2D		mov		dl, 45		;space
 00000104  8B 4D 08		mov		ecx, [ebp+8]		;wordlengh

 00000107			fillarray2:
 00000107  88 17		mov		[edi], dl
 00000109  83 C7 01		add		edi, 1
 0000010C  E2 F9		loop	fillarray2

 0000010E  B2 00		mov		dl, 0
 00000110  88 17		mov		[edi], dl

 00000112  5D			pop		ebp
 00000113  C2 000C		ret		12
 00000116			fillspaces	ENDP

				;user actually plays game
 00000116			gameplay	PROC
 00000116  55			push	ebp
 00000117  8B EC		mov		ebp, esp

				;------------------------------initialize lives and round number
 00000119  C7 05 0000034B R	mov		numlives, 5
	   00000005
 00000123  C7 05 00000357 R	mov		numround, 1
	   00000001
 0000012D  C7 05 00000343 R	mov		winstate, 0
	   00000000

 00000137			gameloop:
				;------------------------------print lives left
 00000137  8B 55 10		mov		edx, [ebp+16]
 0000013A  E8 00000000 E	call	writestring
 0000013F  A1 0000034B R	mov		eax, numlives
 00000144  E8 00000000 E	call	writedec
 00000149  E8 00000000 E	call	crlf
				;------------------------------print hangman corresponding to lives left
 0000014E  FF 35 0000034B R	push	numlives			;8
 00000154  E8 000000AA		call	printman
				;------------------------------print word progress
 00000159  68 000003C4 R	push	OFFSET	spacelist	;12
 0000015E  FF 35 00000353 R	push	wordlength			;8
 00000164  E8 000000C3		call	printprog
				;------------------------------gamestate
 00000169  83 3D 0000034B R	cmp		numlives, 0
	   00
 00000170  74 6F		je		lose
				;------------------------------gamestate check if progress string has no dashes
 00000172  68 000003C4 R	push	OFFSET	spacelist	;16
 00000177  FF 35 00000353 R	push	wordlength			;12
 0000017D  FF 35 00000343 R	push	winstate			;8
 00000183  E8 00000145		call	checkwin
 00000188  83 3D 00000343 R	cmp		winstate, 1
	   01
 0000018F  74 5F		je		win
				;------------------------------print used letters
 00000191  8B 55 14		mov		edx, [ebp+20]
 00000194  E8 00000000 E	call	writestring
 00000199  68 0000035B R	push	OFFSET	usedchars	;12
 0000019E  FF 35 00000357 R	push	numround			;8
 000001A4  E8 000000AD		call	printused
				;------------------------------get user character input
 000001A9  FF 35 0000034B R	push	numlives			;28
 000001AF  FF 35 00000357 R	push	numround			;24
 000001B5  FF 35 0000034F R	push	gameword			;20
 000001BB  FF 35 00000353 R	push	wordlength			;16
 000001C1  68 0000035B R	push	OFFSET	usedchars	;12
 000001C6  68 000003C4 R	push	OFFSET	spacelist	;8
 000001CB  E8 000000A6		call	userinput
				;------------------------------loop new round
 000001D0  83 05 00000357 R	add		numround, 1
	   01
 000001D7  E8 00000000 E	call	clrscr
 000001DC  E9 FFFFFF56		jmp		gameloop

 000001E1			lose:
 000001E1  8B 55 08			mov		edx, [ebp+8]
 000001E4  E8 00000000 E		call	writestring
 000001E9  E8 00000000 E		call	crlf
 000001EE  EB 0F			jmp		endgame
 000001F0			win:
 000001F0  8B 55 0C			mov		edx, [ebp+12]
 000001F3  E8 00000000 E		call	writestring
 000001F8  E8 00000000 E		call	crlf
 000001FD  EB 00			jmp		endgame
 000001FF			endgame:
 000001FF  5D			pop		ebp
 00000200  C2 0010		ret		16
 00000203			gameplay	ENDP

				;prints the hangman ascii art according to lives left
 00000203			printman	PROC
 00000203  55			push	ebp
 00000204  8B EC		mov		ebp, esp

 00000206  8B 45 08		mov		eax, [ebp+8]
 00000209  BB 0000029A R	mov		ebx, OFFSET lives
 0000020E  B9 00000004		mov		ecx, 4
 00000213  F7 E1		mul		ecx
 00000215  03 C3		add		eax, ebx
 00000217  8B 10		mov		edx, [eax]
 00000219  E8 00000000 E	call	WriteString
 0000021E  E8 00000000 E	call	crlf
 00000223  E8 00000000 E	call	crlf

 00000228  5D			pop		ebp
 00000229  C2 0004		ret		4
 0000022C			printman	ENDP

				;prints the progress/letters filled
 0000022C			printprog	PROC
 0000022C  55			push	ebp
 0000022D  8B EC		mov		ebp, esp

 0000022F  8B 7D 0C		mov		edi, [ebp+12]	;string (array of chars)
 00000232  8B 4D 08		mov		ecx, [ebp+8]	;word length
 00000235			progress:
 00000235  8A 07		mov		al, [edi]
 00000237  E8 00000000 E	call	WriteChar
 0000023C  B0 20		mov		al, 32
 0000023E  E8 00000000 E	call	WriteChar
 00000243  83 C7 01		add		edi, 1
 00000246  E2 ED		loop progress
 00000248  E8 00000000 E	call	crlf
 0000024D  E8 00000000 E	call	crlf

 00000252  5D			pop		ebp
 00000253  C2 0008		ret		8
 00000256			printprog	ENDP

				;prints used letters into string
 00000256			printused	PROC
 00000256  55			push	ebp
 00000257  8B EC		mov		ebp, esp
 00000259  8B 7D 0C		mov		edi, [ebp+12]	;usedletters
 0000025C  8B 4D 08		mov		ecx, [ebp+8]	;roundnum
 0000025F			usedloop:
 0000025F  8A 07		mov		al, [edi]
 00000261  E8 00000000 E	call	writechar
 00000266  B0 20		mov		al, 32
 00000268  E8 00000000 E	call	writechar
 0000026D  83 C7 01		add		edi, 1
 00000270  E2 ED		loop usedloop

 00000272  5D			pop		ebp
 00000273  C2 0008		ret		8
 00000276			printused	ENDP

				;does a lot of stuff
 00000276			userinput	PROC
 00000276  55			push	ebp
 00000277  8B EC		mov		ebp, esp
 00000279  8B 75 0C		mov		esi, [ebp+12]	;array used chars
 0000027C  8B 7D 14		mov		edi, [ebp+20]	;gameword
 0000027F  8B 4D 10		mov		ecx, [ebp+16]	;wordlength
 00000282  8B 45 18		mov		eax, [ebp+24]	;round number
 00000285  03 F0		add		esi, eax
 00000287  E8 00000000 E	call	readchar		;user input stored in al
 0000028C  8A D8		mov		bl, al
 0000028E  88 1E		mov		[esi], bl	;move the input char into an array of used input chars
 00000290  8B 75 08		mov		esi, [ebp+8]	;progress string/array of chars
 00000293  03 F1		add		esi, ecx
 00000295  C7 05 00000347 R	mov		matches, 0
	   00000000
 0000029F			compareinput:
 0000029F  8A 07			mov		al, [edi]
 000002A1  3A D8			cmp		bl, al
 000002A3  74 02			je		charmatch
 000002A5  EB 0D			jmp		endcomp
 000002A7				charmatch:
 000002A7  83 05 00000347 R			add		matches, 1
	   01
 000002AE  2B F1				sub		esi, ecx
 000002B0  88 1E				mov		[esi], bl		;replaces the matched char into progress string
 000002B2  03 F1				add		esi, ecx		;this does a fucky wucky for some reason
 000002B4				endcomp:
 000002B4  83 C7 01			add		edi, 1
 000002B7  E2 E6			loop	compareinput
 000002B9  83 3D 00000347 R	cmp		matches, 0			;if no matches found, reduce life
	   00
 000002C0  75 07		jne		playerclear
 000002C2  83 2D 0000034B R	sub		numlives, 1
	   01
 000002C9			playerclear:
 000002C9  5D			pop		ebp
 000002CA  C2 0018		ret		24
 000002CD			userinput	ENDP

 000002CD			checkwin	PROC
 000002CD  55			push	ebp
 000002CE  8B EC		mov		ebp, esp
 000002D0  8B 7D 10		mov		edi, [ebp+16]	;progress string
 000002D3  8B 4D 0C		mov		ecx, [ebp+12]	;word length
 000002D6			checkdash:
 000002D6  8A 07		mov		al, [edi]
 000002D8  B3 2D		mov		bl, 45
 000002DA  3A C3		cmp		al, bl
 000002DC  74 0F		je		continue
 000002DE  83 C7 01		add		edi, 1
 000002E1  E2 F3		loop	checkdash
 000002E3  C7 05 00000343 R	mov		winstate, 1
	   00000001
 000002ED			continue:
 000002ED  5D			pop		ebp
 000002EE  C2 000C		ret		12
 000002F1			checkwin	ENDP

				END main


Microsoft (R) Macro Assembler Version 14.16.27034.0	    03/08/20 14:30:56
hangman.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000003CE Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002F1 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
checkwin . . . . . . . . . . . .	P Near	 000002CD _TEXT	Length= 00000024 Public STDCALL
  checkdash  . . . . . . . . . .	L Near	 000002D6 _TEXT	
  continue . . . . . . . . . . .	L Near	 000002ED _TEXT	
fillspaces . . . . . . . . . . .	P Near	 000000FC _TEXT	Length= 0000001A Public STDCALL
  fillarray2 . . . . . . . . . .	L Near	 00000107 _TEXT	
fillwords  . . . . . . . . . . .	P Near	 00000077 _TEXT	Length= 00000032 Public STDCALL
gameplay . . . . . . . . . . . .	P Near	 00000116 _TEXT	Length= 000000ED Public STDCALL
  gameloop . . . . . . . . . . .	L Near	 00000137 _TEXT	
  lose . . . . . . . . . . . . .	L Near	 000001E1 _TEXT	
  win  . . . . . . . . . . . . .	L Near	 000001F0 _TEXT	
  endgame  . . . . . . . . . . .	L Near	 000001FF _TEXT	
getlength  . . . . . . . . . . .	P Near	 000000D7 _TEXT	Length= 00000025 Public STDCALL
  loopstring . . . . . . . . . .	L Near	 000000E4 _TEXT	
  endstring  . . . . . . . . . .	L Near	 000000F3 _TEXT	
getword  . . . . . . . . . . . .	P Near	 000000A9 _TEXT	Length= 0000002E Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000077 Public STDCALL
  playagain  . . . . . . . . . .	L Near	 00000005 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
printman . . . . . . . . . . . .	P Near	 00000203 _TEXT	Length= 00000029 Public STDCALL
printprog  . . . . . . . . . . .	P Near	 0000022C _TEXT	Length= 0000002A Public STDCALL
  progress . . . . . . . . . . .	L Near	 00000235 _TEXT	
printused  . . . . . . . . . . .	P Near	 00000256 _TEXT	Length= 00000020 Public STDCALL
  usedloop . . . . . . . . . . .	L Near	 0000025F _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
userinput  . . . . . . . . . . .	P Near	 00000276 _TEXT	Length= 00000057 Public STDCALL
  compareinput . . . . . . . . .	L Near	 0000029F _TEXT	
  charmatch  . . . . . . . . . .	L Near	 000002A7 _TEXT	
  endcomp  . . . . . . . . . . .	L Near	 000002B4 _TEXT	
  playerclear  . . . . . . . . .	L Near	 000002C9 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gameword . . . . . . . . . . . .	DWord	 0000034F _DATA	
gewinnen . . . . . . . . . . . .	Byte	 000002DA _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro1 . . . . . . . . . . . . .	Byte	 000002B2 _DATA	
letused  . . . . . . . . . . . .	Byte	 0000030D _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
lives0 . . . . . . . . . . . . .	Byte	 0000022B _DATA	
lives1 . . . . . . . . . . . . .	Byte	 000001BC _DATA	
lives2 . . . . . . . . . . . . .	Byte	 0000014D _DATA	
lives3 . . . . . . . . . . . . .	Byte	 000000DE _DATA	
lives4 . . . . . . . . . . . . .	Byte	 0000006F _DATA	
lives5 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
livesleft  . . . . . . . . . . .	Byte	 000002FB _DATA	
lives  . . . . . . . . . . . . .	DWord	 0000029A _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
matches  . . . . . . . . . . . .	DWord	 00000347 _DATA	
numlives . . . . . . . . . . . .	DWord	 0000034B _DATA	
numround . . . . . . . . . . . .	DWord	 00000357 _DATA	
outro1 . . . . . . . . . . . . .	Byte	 000002C6 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
spacelist  . . . . . . . . . . .	Byte	 000003C4 _DATA	
space  . . . . . . . . . . . . .	DWord	 0000033F _DATA	
usedchars  . . . . . . . . . . .	Byte	 0000035B _DATA	
verloren . . . . . . . . . . . .	Byte	 000002EB _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
winstate . . . . . . . . . . . .	DWord	 00000343 _DATA	
word1  . . . . . . . . . . . . .	Byte	 0000031C _DATA	
word2  . . . . . . . . . . . . .	Byte	 00000322 _DATA	
word3  . . . . . . . . . . . . .	Byte	 00000329 _DATA	
word4  . . . . . . . . . . . . .	Byte	 00000331 _DATA	
word5  . . . . . . . . . . . . .	Byte	 00000337 _DATA	
wordlength . . . . . . . . . . .	DWord	 00000353 _DATA	
wordlist . . . . . . . . . . . .	Byte	 000003BF _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
